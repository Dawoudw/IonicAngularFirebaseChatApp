import { IonicNativePlugin } from '@ionic-native/core';
import { Observable } from 'rxjs';
/**
 * @name Firebase
 * @description
 * This plugin brings push notifications, analytics, event tracking, crash reporting and more from Google Firebase to your Cordova project! Android and iOS supported (including iOS 10).
 *
 * @usage
 * ```typescript
 * import { Firebase } from '@ionic-native/firebase/ngx';
 *
 * constructor(private firebase: Firebase) { }
 *
 * ...
 *
 * this.firebase.getToken()
 *   .then(token => console.log(`The token is ${token}`)) // save the token server-side and use it to push notifications to this device
 *   .catch(error => console.error('Error getting token', error));
 *
 * this.firebase.onNotificationOpen()
 *    .subscribe(data => console.log(`User opened a notification ${data}`));
 *
 * this.firebase.onTokenRefresh()
 *   .subscribe((token: string) => console.log(`Got a new token ${token}`));
 *
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class Firebase extends IonicNativePlugin {
    /**
     * Get the device token
     * @return {Promise<null | string>} Note that token will be null if it has not been established yet
     */
    getToken(): Promise<null | string>;
    /**
     * Get notified when a token is refreshed
     * @return {Observable<any>}
     */
    onTokenRefresh(): Observable<any>;
    /**
     * Get notified when the user opens a notification
     * @return {Observable<any>}
     */
    onNotificationOpen(): Observable<any>;
    /**
     * Grant permission to receive push notifications
     * @return {Promise<any>}
     */
    grantPermission(): Promise<any>;
    /**
     * Check permission to receive push notifications
     * @return {Promise<{isEnabled: boolean}>}
     */
    hasPermission(): Promise<{
        isEnabled: boolean;
    }>;
    /**
     * Set icon badge number. Set to 0 to clear the badge.
     * @param {number} badgeNumber
     * @return {Promise<any>}
     */
    setBadgeNumber(badgeNumber: number): Promise<any>;
    /**
     * Get icon badge number
     * @return {Promise<any>}
     */
    getBadgeNumber(): Promise<any>;
    /**
     * Subscribe to a topic
     * @param {string} topic
     * @return {Promise<any>}
     */
    subscribe(topic: string): Promise<any>;
    /**
     * Unsubscribe from a topic
     * @param {string} topic
     * @return {Promise<any>}
     */
    unsubscribe(topic: string): Promise<any>;
    /**
     * Unregister from firebase, used to stop receiving push notifications.
     * Call this when you logout user from your app.
     */
    unregister(): Promise<any>;
    /**
     * Log an event using Analytics
     * @param {string} type
     * @param {Object} data
     * @return {Promise<any>}
     */
    logEvent(type: string, data: any): Promise<any>;
    /**
     * Log an Error using FirebaseCrash
     * @param {string} message
     * @return {Promise<any>}
     */
    logError(message: string): Promise<any>;
    /**
     * Set the name of the current screen in Analytics
     * @param {string} name Screen name
     * @return {Promise<any>}
     */
    setScreenName(name: string): Promise<any>;
    /**
     * Set a user id for use in Analytics
     * @param {string} userId
     * @return {Promise<any>}
     */
    setUserId(userId: string): Promise<any>;
    /**
     * Set a user property for use in Analytics
     * @param {string} name
     * @param {string} value
     * @return {Promise<any>}
     */
    setUserProperty(name: string, value: string): Promise<any>;
    /**
     * Fetch Remote Config parameter values for your app
     * @param {number} [cacheExpirationSeconds]
     * @return {Promise<any>}
     */
    fetch(cacheExpirationSeconds?: number): Promise<any>;
    /**
     * Activate the Remote Config fetched config
     * @return {Promise<any>}
     */
    activateFetched(): Promise<any>;
    /**
     * Retrieve a Remote Config value
     * @param {string} key
     * @param {string} [namespace]
     * @return {Promise<any>}
     */
    getValue(key: string, namespace?: string): Promise<any>;
    /**
     * Retrieve a Remote Config byte array
     * @param {string} key
     * @param {string} [namespace]
     * @return {Promise<any>}
     */
    getByteArray(key: string, namespace?: string): Promise<any>;
    /**
     * Get the current state of the FirebaseRemoteConfig singleton object
     * @return {Promise<any>}
     */
    getInfo(): Promise<any>;
    /**
     * Change the settings for the FirebaseRemoteConfig object's operations
     * @param {Object} settings
     * @return {Promise<any>}
     */
    setConfigSettings(settings: any): Promise<any>;
    /**
     * Set defaults in the Remote Config
     * @param {Object} defaults
     * @param {string} [namespace]
     * @return {Promise<any>}
     */
    setDefaults(defaults: any, namespace?: string): Promise<any>;
    /**
     * Start a trace.
     * @param {string} trace Trace name
     */
    startTrace(trace: string): Promise<any>;
    /**
     * To count the performance-related events that occur in your app (such as cache hits or retries), add a line of code
     * similar to the following whenever the event occurs, using a string other than retry to name that event if you are
     * counting a different type of event:
     * @param {string} trace Trace name
     * @param {string} counter Counter
     */
    incrementCounter(trace: string, counter: string): Promise<any>;
    /**
     * Stop the trace
     * @param {string} trace Trace name
     */
    stopTrace(trace: string): void;
    /**
     * Allows the user to enable/disable analytics collection
     * @param {boolean} enabled value to set collection
     * @returns {Promise<any>}
     */
    setAnalyticsCollectionEnabled(enabled: boolean): Promise<any>;
    /**
     * Allows the user to set User Identifier for crashlytics reporting
     * https://firebase.google.com/docs/crashlytics/customize-crash-reports?authuser=0#set_user_ids
     * @param {string} userId value to set the userId
     * @returns {Promise<any>}
     */
    setCrashlyticsUserId(userId: string): Promise<any>;
    /**
     * Sends an SMS to the user with the SMS verification code and returns the Verification ID required to sign in using phone authentication
     * @param {string} phoneNumber The phone number, including '+' and country code
     * @param {number} timeoutDuration (Android only) The timeout in sec - no more SMS will be sent to this number until this timeout expires
     * @returns {Promise<any>}
     */
    verifyPhoneNumber(phoneNumber: string, timeoutDuration?: number): Promise<any>;
    /**
     * Clear all pending notifications from the drawer
     * @return {Promise<any>}
     */
    clearAllNotifications(): Promise<any>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Firebase, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<Firebase>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElvbmljTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbi8qKlxuICogQG5hbWUgRmlyZWJhc2VcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBwbHVnaW4gYnJpbmdzIHB1c2ggbm90aWZpY2F0aW9ucywgYW5hbHl0aWNzLCBldmVudCB0cmFja2luZywgY3Jhc2ggcmVwb3J0aW5nIGFuZCBtb3JlIGZyb20gR29vZ2xlIEZpcmViYXNlIHRvIHlvdXIgQ29yZG92YSBwcm9qZWN0ISBBbmRyb2lkIGFuZCBpT1Mgc3VwcG9ydGVkIChpbmNsdWRpbmcgaU9TIDEwKS5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEZpcmViYXNlIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9maXJlYmFzZS9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgZmlyZWJhc2U6IEZpcmViYXNlKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiB0aGlzLmZpcmViYXNlLmdldFRva2VuKClcbiAqICAgLnRoZW4odG9rZW4gPT4gY29uc29sZS5sb2coYFRoZSB0b2tlbiBpcyAke3Rva2VufWApKSAvLyBzYXZlIHRoZSB0b2tlbiBzZXJ2ZXItc2lkZSBhbmQgdXNlIGl0IHRvIHB1c2ggbm90aWZpY2F0aW9ucyB0byB0aGlzIGRldmljZVxuICogICAuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5lcnJvcignRXJyb3IgZ2V0dGluZyB0b2tlbicsIGVycm9yKSk7XG4gKlxuICogdGhpcy5maXJlYmFzZS5vbk5vdGlmaWNhdGlvbk9wZW4oKVxuICogICAgLnN1YnNjcmliZShkYXRhID0+IGNvbnNvbGUubG9nKGBVc2VyIG9wZW5lZCBhIG5vdGlmaWNhdGlvbiAke2RhdGF9YCkpO1xuICpcbiAqIHRoaXMuZmlyZWJhc2Uub25Ub2tlblJlZnJlc2goKVxuICogICAuc3Vic2NyaWJlKCh0b2tlbjogc3RyaW5nKSA9PiBjb25zb2xlLmxvZyhgR290IGEgbmV3IHRva2VuICR7dG9rZW59YCkpO1xuICpcbiAqIGBgYFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBGaXJlYmFzZSBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGRldmljZSB0b2tlblxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8bnVsbCB8IHN0cmluZz59IE5vdGUgdGhhdCB0b2tlbiB3aWxsIGJlIG51bGwgaWYgaXQgaGFzIG5vdCBiZWVuIGVzdGFibGlzaGVkIHlldFxuICAgICAqL1xuICAgIGdldFRva2VuKCk6IFByb21pc2U8bnVsbCB8IHN0cmluZz47XG4gICAgLyoqXG4gICAgICogR2V0IG5vdGlmaWVkIHdoZW4gYSB0b2tlbiBpcyByZWZyZXNoZWRcbiAgICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlPGFueT59XG4gICAgICovXG4gICAgb25Ub2tlblJlZnJlc2goKTogT2JzZXJ2YWJsZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIEdldCBub3RpZmllZCB3aGVuIHRoZSB1c2VyIG9wZW5zIGEgbm90aWZpY2F0aW9uXG4gICAgICogQHJldHVybiB7T2JzZXJ2YWJsZTxhbnk+fVxuICAgICAqL1xuICAgIG9uTm90aWZpY2F0aW9uT3BlbigpOiBPYnNlcnZhYmxlPGFueT47XG4gICAgLyoqXG4gICAgICogR3JhbnQgcGVybWlzc2lvbiB0byByZWNlaXZlIHB1c2ggbm90aWZpY2F0aW9uc1xuICAgICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICAgKi9cbiAgICBncmFudFBlcm1pc3Npb24oKTogUHJvbWlzZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIENoZWNrIHBlcm1pc3Npb24gdG8gcmVjZWl2ZSBwdXNoIG5vdGlmaWNhdGlvbnNcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPHtpc0VuYWJsZWQ6IGJvb2xlYW59Pn1cbiAgICAgKi9cbiAgICBoYXNQZXJtaXNzaW9uKCk6IFByb21pc2U8e1xuICAgICAgICBpc0VuYWJsZWQ6IGJvb2xlYW47XG4gICAgfT47XG4gICAgLyoqXG4gICAgICogU2V0IGljb24gYmFkZ2UgbnVtYmVyLiBTZXQgdG8gMCB0byBjbGVhciB0aGUgYmFkZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJhZGdlTnVtYmVyXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgICAqL1xuICAgIHNldEJhZGdlTnVtYmVyKGJhZGdlTnVtYmVyOiBudW1iZXIpOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogR2V0IGljb24gYmFkZ2UgbnVtYmVyXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgICAqL1xuICAgIGdldEJhZGdlTnVtYmVyKCk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBTdWJzY3JpYmUgdG8gYSB0b3BpY1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BpY1xuICAgICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICAgKi9cbiAgICBzdWJzY3JpYmUodG9waWM6IHN0cmluZyk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBVbnN1YnNjcmliZSBmcm9tIGEgdG9waWNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdG9waWNcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgdW5zdWJzY3JpYmUodG9waWM6IHN0cmluZyk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBVbnJlZ2lzdGVyIGZyb20gZmlyZWJhc2UsIHVzZWQgdG8gc3RvcCByZWNlaXZpbmcgcHVzaCBub3RpZmljYXRpb25zLlxuICAgICAqIENhbGwgdGhpcyB3aGVuIHlvdSBsb2dvdXQgdXNlciBmcm9tIHlvdXIgYXBwLlxuICAgICAqL1xuICAgIHVucmVnaXN0ZXIoKTogUHJvbWlzZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIExvZyBhbiBldmVudCB1c2luZyBBbmFseXRpY3NcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgICAqL1xuICAgIGxvZ0V2ZW50KHR5cGU6IHN0cmluZywgZGF0YTogYW55KTogUHJvbWlzZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIExvZyBhbiBFcnJvciB1c2luZyBGaXJlYmFzZUNyYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2VcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgbG9nRXJyb3IobWVzc2FnZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgbmFtZSBvZiB0aGUgY3VycmVudCBzY3JlZW4gaW4gQW5hbHl0aWNzXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgU2NyZWVuIG5hbWVcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgc2V0U2NyZWVuTmFtZShuYW1lOiBzdHJpbmcpOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogU2V0IGEgdXNlciBpZCBmb3IgdXNlIGluIEFuYWx5dGljc1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1c2VySWRcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgc2V0VXNlcklkKHVzZXJJZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIFNldCBhIHVzZXIgcHJvcGVydHkgZm9yIHVzZSBpbiBBbmFseXRpY3NcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICAgKi9cbiAgICBzZXRVc2VyUHJvcGVydHkobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIEZldGNoIFJlbW90ZSBDb25maWcgcGFyYW1ldGVyIHZhbHVlcyBmb3IgeW91ciBhcHBcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2NhY2hlRXhwaXJhdGlvblNlY29uZHNdXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgICAqL1xuICAgIGZldGNoKGNhY2hlRXhwaXJhdGlvblNlY29uZHM/OiBudW1iZXIpOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogQWN0aXZhdGUgdGhlIFJlbW90ZSBDb25maWcgZmV0Y2hlZCBjb25maWdcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgYWN0aXZhdGVGZXRjaGVkKCk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZSBhIFJlbW90ZSBDb25maWcgdmFsdWVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtuYW1lc3BhY2VdXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgICAqL1xuICAgIGdldFZhbHVlKGtleTogc3RyaW5nLCBuYW1lc3BhY2U/OiBzdHJpbmcpOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogUmV0cmlldmUgYSBSZW1vdGUgQ29uZmlnIGJ5dGUgYXJyYXlcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtuYW1lc3BhY2VdXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgICAqL1xuICAgIGdldEJ5dGVBcnJheShrZXk6IHN0cmluZywgbmFtZXNwYWNlPzogc3RyaW5nKTogUHJvbWlzZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgRmlyZWJhc2VSZW1vdGVDb25maWcgc2luZ2xldG9uIG9iamVjdFxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICAgKi9cbiAgICBnZXRJbmZvKCk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBDaGFuZ2UgdGhlIHNldHRpbmdzIGZvciB0aGUgRmlyZWJhc2VSZW1vdGVDb25maWcgb2JqZWN0J3Mgb3BlcmF0aW9uc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzZXR0aW5nc1xuICAgICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICAgKi9cbiAgICBzZXRDb25maWdTZXR0aW5ncyhzZXR0aW5nczogYW55KTogUHJvbWlzZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIFNldCBkZWZhdWx0cyBpbiB0aGUgUmVtb3RlIENvbmZpZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0c1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbbmFtZXNwYWNlXVxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICAgKi9cbiAgICBzZXREZWZhdWx0cyhkZWZhdWx0czogYW55LCBuYW1lc3BhY2U/OiBzdHJpbmcpOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogU3RhcnQgYSB0cmFjZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHJhY2UgVHJhY2UgbmFtZVxuICAgICAqL1xuICAgIHN0YXJ0VHJhY2UodHJhY2U6IHN0cmluZyk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBUbyBjb3VudCB0aGUgcGVyZm9ybWFuY2UtcmVsYXRlZCBldmVudHMgdGhhdCBvY2N1ciBpbiB5b3VyIGFwcCAoc3VjaCBhcyBjYWNoZSBoaXRzIG9yIHJldHJpZXMpLCBhZGQgYSBsaW5lIG9mIGNvZGVcbiAgICAgKiBzaW1pbGFyIHRvIHRoZSBmb2xsb3dpbmcgd2hlbmV2ZXIgdGhlIGV2ZW50IG9jY3VycywgdXNpbmcgYSBzdHJpbmcgb3RoZXIgdGhhbiByZXRyeSB0byBuYW1lIHRoYXQgZXZlbnQgaWYgeW91IGFyZVxuICAgICAqIGNvdW50aW5nIGEgZGlmZmVyZW50IHR5cGUgb2YgZXZlbnQ6XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRyYWNlIFRyYWNlIG5hbWVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY291bnRlciBDb3VudGVyXG4gICAgICovXG4gICAgaW5jcmVtZW50Q291bnRlcih0cmFjZTogc3RyaW5nLCBjb3VudGVyOiBzdHJpbmcpOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogU3RvcCB0aGUgdHJhY2VcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHJhY2UgVHJhY2UgbmFtZVxuICAgICAqL1xuICAgIHN0b3BUcmFjZSh0cmFjZTogc3RyaW5nKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBBbGxvd3MgdGhlIHVzZXIgdG8gZW5hYmxlL2Rpc2FibGUgYW5hbHl0aWNzIGNvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGVuYWJsZWQgdmFsdWUgdG8gc2V0IGNvbGxlY3Rpb25cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgICAqL1xuICAgIHNldEFuYWx5dGljc0NvbGxlY3Rpb25FbmFibGVkKGVuYWJsZWQ6IGJvb2xlYW4pOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogQWxsb3dzIHRoZSB1c2VyIHRvIHNldCBVc2VyIElkZW50aWZpZXIgZm9yIGNyYXNobHl0aWNzIHJlcG9ydGluZ1xuICAgICAqIGh0dHBzOi8vZmlyZWJhc2UuZ29vZ2xlLmNvbS9kb2NzL2NyYXNobHl0aWNzL2N1c3RvbWl6ZS1jcmFzaC1yZXBvcnRzP2F1dGh1c2VyPTAjc2V0X3VzZXJfaWRzXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVzZXJJZCB2YWx1ZSB0byBzZXQgdGhlIHVzZXJJZFxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgc2V0Q3Jhc2hseXRpY3NVc2VySWQodXNlcklkOiBzdHJpbmcpOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogU2VuZHMgYW4gU01TIHRvIHRoZSB1c2VyIHdpdGggdGhlIFNNUyB2ZXJpZmljYXRpb24gY29kZSBhbmQgcmV0dXJucyB0aGUgVmVyaWZpY2F0aW9uIElEIHJlcXVpcmVkIHRvIHNpZ24gaW4gdXNpbmcgcGhvbmUgYXV0aGVudGljYXRpb25cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGhvbmVOdW1iZXIgVGhlIHBob25lIG51bWJlciwgaW5jbHVkaW5nICcrJyBhbmQgY291bnRyeSBjb2RlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVvdXREdXJhdGlvbiAoQW5kcm9pZCBvbmx5KSBUaGUgdGltZW91dCBpbiBzZWMgLSBubyBtb3JlIFNNUyB3aWxsIGJlIHNlbnQgdG8gdGhpcyBudW1iZXIgdW50aWwgdGhpcyB0aW1lb3V0IGV4cGlyZXNcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgICAqL1xuICAgIHZlcmlmeVBob25lTnVtYmVyKHBob25lTnVtYmVyOiBzdHJpbmcsIHRpbWVvdXREdXJhdGlvbj86IG51bWJlcik6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBDbGVhciBhbGwgcGVuZGluZyBub3RpZmljYXRpb25zIGZyb20gdGhlIGRyYXdlclxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICAgKi9cbiAgICBjbGVhckFsbE5vdGlmaWNhdGlvbnMoKTogUHJvbWlzZTxhbnk+O1xufVxuIl19