{"version":3,"sources":["webpack:///src/app/pages/chats/chats.page.html","webpack:///src/app/pages/chats/chats.module.ts","webpack:///src/app/pages/chats/chats.page.scss","webpack:///src/app/pages/chats/chats.page.ts"],"names":["routes","path","component","ChatsPageModule","imports","forChild","declarations","ChatsPage","auth","router","chatService","users","items","title","participant","participant1","currentUserEmail1","currentUser","email","groups","getGroups","groupsFlag","getAllUsers","subscribe","result","forEach","r","payload","doc","data","push","obs","findUser","res","length","indexOf","createGroup","then","navigateByUrl","signOut","selector","template"],"mappings":"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","file":"pages-chats-chats-module-es5.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n\\n    </ion-buttons>\\n    <ion-title>Chats</ion-title>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-button routerLink=\\\"/profile\\\">\\n        <ion-icon name=\\\"people\\\" slot=\\\"icon-only\\\"></ion-icon>\\n      </ion-button>\\n      <ion-button (click)=\\\"signOut()\\\">\\n        <ion-icon name=\\\"log-out\\\" slot=\\\"icon-only\\\"></ion-icon>\\n      </ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n\\n  <ion-list>\\n    <ion-item-divider>\\n      <ion-label>\\n        Welcome {{ currentUserEmail1 }}\\n      </ion-label>\\n    </ion-item-divider>\\n    <ion-item-divider>\\n      <!-- <ion-label *ngIf=\\\"groupsFlag\\\"> -->\\n        <ion-label *ngIf=\\\"(groups | async)?.length!=0\\\">\\n        Your Groups\\n      </ion-label>\\n    </ion-item-divider>\\n    <ion-item button *ngFor=\\\"let group of groups | async\\\" class=\\\"ion-text-wrap\\\"\\n    [routerLink]=\\\"['/', 'chat', (group | async)?.id || 0]\\\">\\n      <ion-label class=\\\"ion-text-wrap\\\">\\n        <ion-text color=\\\"primary\\\">\\n          <h3>{{ (group | async)?.title }}</h3>\\n        </ion-text>\\n        <p>{{ (group | async)?.users.length }} Users</p>\\n      </ion-label>\\n    </ion-item>\\n\\n    <ion-item-divider>\\n      <ion-label>\\n        Contacts (All Available Users)\\n      </ion-label>\\n    </ion-item-divider>\\n    <ion-item *ngFor=\\\"let item of items; \\\">\\n      <!-- {{item.payload.doc.data().nickname}} -->\\n      <!-- <ion-item *ngIf=\\\"item.payload.doc.data().email!=currentUserEmail1\\\">  -->\\n      <ion-label>\\n        {{ item.payload.doc.data().email }}\\n        <p>{{ item.payload.doc.data().nickname }}</p>\\n      </ion-label>\\n    <!-- </ion-col>\\n      <ion-col> -->\\n      <ion-button icon-only (click)=\\\"addUser(item.payload.doc.data().email,item.payload.doc.data().nickname)\\\">\\n        <ion-icon name=\\\"chatbubble-outline\\\"></ion-icon>\\n      </ion-button>\\n      <ion-button icon-only>\\n        <ion-icon name=\\\"call-outline\\\"></ion-icon>\\n      </ion-button>\\n      \\n  <!-- </ion-item> -->\\n\\n      <!-- <ion-button color=\\\"light\\\" expand=\\\"full\\\" fill=\\\"clear\\\" [disabled]=\\\"title == '' || users.length == 0\\\" \\n    (click)=\\\"createGroup()\\\">Start\\n      Group</ion-button> -->\\n      \\n\\n</ion-item>\\n\\n\\n\\n\\n  </ion-list>\\n\\n  \\n</ion-content>\\n\\n<ion-footer>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-button color=\\\"light\\\" fill=\\\"clear\\\" expand=\\\"full\\\" routerLink=\\\"/chats/start\\\">Create a new Group</ion-button>\\n  </ion-toolbar>\\n</ion-footer>\\n\\n\";","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ChatsPage } from './chats.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ChatsPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [ChatsPage]\n})\nexport class ChatsPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2NoYXRzL2NoYXRzLnBhZ2Uuc2NzcyJ9 */\";","import { ChatService } from './../../services/chat.service';\nimport { AuthService } from './../../services/auth.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable, forkJoin } from 'rxjs';\n\n@Component({\n  selector: 'app-chats',\n  templateUrl: './chats.page.html',\n  styleUrls: ['./chats.page.scss'],\n})\nexport class ChatsPage implements OnInit {\n\n  groups: Observable<any>;\n  users = [];\n  items = [];\n  allusers: Array<any>;\n  // items: Array<any>;\n  title = '';\n  participant = '';\n  participant1 = '';\n  currentUserEmail1 = '';\n  groupsFlag: Boolean;\n  \n\n  constructor(\n    private auth: AuthService, \n    private router: Router, \n    private chatService: ChatService) { }\n\n  ngOnInit() {\n    //getting current user nickname\n    this.currentUserEmail1 = this.auth.currentUser.email;\n\n\n    //getting list of all available groups\n    this.groups = this.chatService.getGroups();\n    if(this.groups) {\n      this.groupsFlag = true;\n    } else {\n      this.groupsFlag = false;\n    }\n\n    //this gets a list of all users\n    this.chatService.getAllUsers()\n        .subscribe(result => {\n          // this.items = result;\n          result.forEach(r => {\n            // console.log(\"r\");\n            // console.log(r.payload.doc.data()['email']);\n            // console.log(this.currentUserEmail1);\n            if(r.payload.doc.data()['email'] != this.currentUserEmail1) {\n                this.items.push(r);\n                // console.log(r);\n            }\n          });   \n    });\n  }\n\n  // this.all_data.subscribe(users => {\n  //   var data = [];\n  //   users.forEach(user => {\n  //     if (user.$key !== this._auth$.id) {\n  //       console.log(user);\n  //       data.push(user);\n  //     }\n  //   });\n  //   this.users = data;\n  // });\n\n  //this is for creating a new group when chatting with only one person\n  addUser(participant1) {\n    // console.log(\"when calling addUser function, users array =\");\n    // console.log(this.users);\n    this.participant = participant1;\n    let obs = this.chatService.findUser(this.participant);\n    forkJoin(obs).subscribe(res => {\n      for (let data of res) {\n        if (data.length > 0) {\n          if(this.users.indexOf(data[0]) > -1) {\n          } else {\n            this.users.push(data[0]);\n          }\n        }\n      }\n      this.participant = '';\n    });\n    this.createGroup();\n  }\n\n  createGroup() {\n    // console.log(\"this.title\");\n    // console.log(this.title);\n    // console.log(\"this.users\");\n    // console.log(this.users);\n    // console.log(\"users array length: \");\n    // console.log(this.users.length);\n    this.chatService.createGroup(this.title, this.users).then(res => {\n      this.router.navigateByUrl('/chats');\n    });\n  }\n\n  openProfile() {\n\n  }\n  \n  signOut() {\n    this.users = null;\n    this.groups = null;\n    this.items = null;\n    this.auth.signOut().then(() => {\n      this.router.navigateByUrl('/login');\n    });\n  }\n}\n"]}