{"version":3,"sources":["./src/app/pages/chats/chats.page.html","./src/app/pages/chats/chats.module.ts","./src/app/pages/chats/chats.page.scss","./src/app/pages/chats/chats.page.ts"],"names":[],"mappings":"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","file":"pages-chats-chats-module-es2015.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n\\n    </ion-buttons>\\n    <ion-title>Welcome {{ currentUserNickname1 }}</ion-title>\\n    <ion-buttons slot=\\\"end\\\">\\n      <!-- <ion-button routerLink=\\\"/profile\\\">\\n        <ion-icon name=\\\"people\\\" slot=\\\"icon-only\\\"></ion-icon>\\n      </ion-button> -->\\n      <ion-button (click)=\\\"signOut()\\\">\\n        <ion-icon name=\\\"log-out\\\" slot=\\\"icon-only\\\"></ion-icon>\\n      </ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-refresher slot=\\\"fixed\\\" (ionRefresh)=\\\"doRefresh($event)\\\">\\n    <ion-refresher-content\\n      pullingIcon=\\\"arrow-down-outline\\\"\\n      pullingText=\\\"Pull to refresh\\\"\\n      refreshingSpinner=\\\"dots\\\"\\n      refreshingText=\\\"Refreshing...\\\">\\n    </ion-refresher-content>\\n  </ion-refresher>\\n\\n\\n  \\n  <ion-list>\\n    <ion-item-divider>\\n      <ion-label>\\n        Signed in as: {{ currentUserEmail1 }}\\n      </ion-label>\\n    </ion-item-divider>\\n\\n    <!-- Showing Groups created using \\\"Create A Group Button\\\" -->\\n    <ion-item-divider *ngIf=\\\"listOfGroups.length!=0\\\">\\n      <ion-label>\\n       Your Groups\\n      </ion-label>\\n    </ion-item-divider>\\n    <ion-item button *ngFor=\\\"let item of listOfGroups;\\\"\\n    (click)=\\\"GroupChat(item.payload.doc.data().id,item.payload.doc.data().title)\\\"\\n    >\\n      <ion-label class=\\\"ion-text-wrap\\\">\\n        <ion-text color=\\\"primary\\\">\\n          <h3>{{ item.payload.doc.data().title }}</h3>\\n        </ion-text>\\n        <p>{{ item.payload.doc.data().users}} Users</p>\\n        <!-- <p>Group id: {{ item.payload.doc.data().id }}</p> -->\\n      </ion-label>\\n    </ion-item>\\n\\n\\n\\n    <ion-item-divider>\\n      <ion-label>\\n        Contacts (All Available Users)\\n      </ion-label>\\n    </ion-item-divider>\\n    <ion-item button *ngFor=\\\"let item of listOfUsers;\\\" (click)=\\\"oneOnOneChat(item.payload.doc.data().email,item.payload.doc.data().nickname)\\\">\\n      <ion-label>\\n        {{ item.payload.doc.data().email }}\\n        <p>{{ item.payload.doc.data().nickname }}</p>\\n      </ion-label>\\n      <!-- Keep either a button or a routerlink--both togather will not work -->\\n      <!-- <ion-button icon-only (click)=\\\"oneOnOneChat(item.payload.doc.data().email,item.payload.doc.data().nickname)\\\">\\n        <ion-icon name=\\\"chatbubble-outline\\\"></ion-icon>\\n      </ion-button> -->\\n      <!-- <ion-button icon-only>\\n        <ion-icon name=\\\"call-outline\\\"></ion-icon>\\n      </ion-button> -->\\n    </ion-item>\\n\\n\\n\\n    <!-- Showing All groups (including one on one chat groups) -->\\n    <!-- <ion-item-divider *ngIf=\\\"(groups | async)?.length!=0\\\">\\n      <ion-label>\\n      All Groups (1-1 groups & group chat groups)\\n    </ion-label>\\n  </ion-item-divider>\\n  <ion-item button *ngFor=\\\"let group of groups | async\\\" class=\\\"ion-text-wrap\\\"\\n  [routerLink]=\\\"['/', 'chat', (group | async)?.id || 0]\\\">\\n    <ion-label class=\\\"ion-text-wrap\\\">\\n      <ion-text color=\\\"primary\\\">\\n        <h3>{{ (group | async)?.title }}</h3>\\n      </ion-text>\\n      <p>{{ (group | async)?.users.length }} Users</p>\\n    </ion-label>\\n    <ion-badge color=\\\"success\\\" slot=\\\"end\\\"> {{ getUnreadMessageBadge }}</ion-badge>\\n  </ion-item> -->\\n\\n\\n\\n\\n\\n\\n  </ion-list>\\n\\n\\n\\n</ion-content>\\n\\n\\n\\n\\n\\n<ion-footer>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-button color=\\\"light\\\" fill=\\\"clear\\\" expand=\\\"full\\\" routerLink=\\\"/chats/start\\\">Create a new Group</ion-button>\\n  </ion-toolbar>\\n</ion-footer>\\n\\n\";","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ChatsPage } from './chats.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ChatsPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [ChatsPage]\n})\nexport class ChatsPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2NoYXRzL2NoYXRzLnBhZ2Uuc2NzcyJ9 */\";","import { ChatService } from './../../services/chat.service';\nimport { AuthService } from './../../services/auth.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n// import { map } from 'rxjs/operators';\nimport { forkJoin, Observable } from 'rxjs';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { take, map } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-chats',\n  templateUrl: './chats.page.html',\n  styleUrls: ['./chats.page.scss'],\n})\nexport class ChatsPage implements OnInit {\n\n  groups: Observable<any>;\n  groups2: Observable<any>;\n  newGroups: Observable<any>;\n  users = [];\n  listOfUsers = [];\n  listOfGroups = [];\n  allusers: Array<any>;\n  title = '';\n  titleCheck = '';\n  participant = '';\n  participant1 = '';\n  currentUserEmail1 = '';\n  currentUserNickname1 = '';\n  getUnreadMessageBadge: any;\n  chat = null;\n  messages: Observable<any[]>;\n  oneOnOneEmail: '';\n  oneOnOneid: any;\n  oneOnOnenickname: '';\n  groupAvailable: boolean;\n  groupId: any;\n\n\n\n  \n\n  constructor(\n    private auth: AuthService, \n    private db: AngularFirestore,\n    private router: Router, \n    private chatService: ChatService) { }\n\n  ngOnInit() {\n\n    this.users = [];\n\n    //getting current user email\n    this.currentUserEmail1 = this.auth.currentUser.email;\n\n    //getting current user nickname\n    this.currentUserNickname1 = this.auth.currentUserNickName;\n\n    //getting unread messages badge -- if last 10+ unread messages then it will show 10+\n    this.getUnreadMessageBadge = this.getUnreadMessages();\n\n    //getting list of all available groups\n    this.groups = this.chatService.getGroups();\n\n    //get all groups for group chats\n    this.listOfGroups = [];\n    this.chatService.getAllGroups()\n    .subscribe(result => {\n      result.forEach(r => {\n        if(r.payload.doc.data()['type'] == 'group') {\n          console.log(\"\")\n          console.log(\"id of these groups =\");\n          console.log(r.payload.doc.id);\n          this.listOfGroups.push(r);\n        }\n      });   \n    });  \n\n    //this gets a list of all users\n    this.listOfUsers = [];\n    this.chatService.getAllUsers()\n        .subscribe(result => {\n          result.forEach(r => {\n            if(r.payload.doc.data()['email'] != this.currentUserEmail1) {\n                this.listOfUsers.push(r);\n            }\n          });   \n    });\n\n\n  }\n\n  //swipe down to refresh\n  doRefresh(event) {\n    console.log('Begin async operation');\n    //getting list of all available groups\n    this.groups = this.chatService.getGroups();\n    \n    //get all groups for group chats\n    this.listOfGroups = [];\n    this.chatService.getAllGroups()\n    .subscribe(result => {\n      result.forEach(r => {\n        if(r.payload.doc.data()['type'] == 'group') {\n          console.log(\"\")\n          console.log(\"id of these groups =\");\n          console.log(r.payload.doc.id);\n          this.listOfGroups.push(r);\n        }\n      });   \n    });  \n\n    //this gets a list of all users\n    this.listOfUsers = [];\n    this.chatService.getAllUsers()\n      .subscribe(result => {\n        result.forEach(r => {\n        if(r.payload.doc.data()['email'] != this.currentUserEmail1) {\n            this.listOfUsers.push(r);\n          }\n        });   \n    });\n\n    setTimeout(() => {\n      console.log('Async operation has ended');\n      event.target.complete();\n    }, 2000);\n  }\n\n  //function to get unread messages\n  getUnreadMessages() {\n    let count = 0;\n    return count;\n  }\n  getMsgFromName(userId) {\n    for (let usr of this.chat.users) {\n      if (usr.id == userId) {\n        return usr.nickname;\n      }\n    }\n    return 'Deleted';\n  }\n    \n\n\n  //---------one on one chat\n  oneOnOneChat(email1,nickname2) {\n    //creating group name--------------------------------- stored in this.titleCheck (ordered alphabatically from both users' nickname)\n    let nickname1 = this.auth.nickname;\n    let x = nickname1.localeCompare(nickname2, undefined, {numeric: true, sensitivity: 'base'});\n    if(x==-1){\n      // console.log(\"nickname1 will come first\");\n      this.titleCheck = 'oOc_'+nickname1 +'&'+ nickname2;\n      console.log(\"this.titlecheck =\"+this.titleCheck);\n    } else {\n      // console.log(\"nickname2 will come first\");\n      this.titleCheck = 'oOc_'+nickname2 +'&'+ nickname1;\n      console.log(\"this.titlecheck =\"+this.titleCheck);\n    }\n\n    let obs1 = this.findGroup(this.titleCheck);\n    forkJoin(obs1).subscribe(res => {\n      for (let data of res) {\n        if (data.length > 0) {\n          console.log(\"found an existing group with this group id =\"+data[0].id);\n          this.groupId = data[0].id;\n          this.router.navigateByUrl(`/chat/${this.groupId}`);\n        }\n        else {\n          console.log(\"group not found--in create group section\");   //group not available--create group\n          setTimeout(() => {\n            this.addUser(email1);\n            console.log(this.users);\n            // this.readyToCreateOneOnOneGroup();\n          // this.groupId  is assigned with new group id in createGroup\n          }, 1000);\n          setTimeout(() => {\n            this.readyToCreateOneOnOneGroup();\n          // this.groupId  is assigned with new group id in createGroup()\n          \n          }, 2000);\n        }\n      }\n    });\n  }\n\n  findGroup(title) {\n    let group = this.db.collection('groups', ref => \n      ref.where('title', '==', title)).valueChanges({ idField: 'id' }).pipe(\n      take(1)\n    );\n    return group;\n  }\n\n  GroupChat(id,title) {\n    console.log(\"id passed =\"+id);\n    let obs2 = this.chatService.findGroupById(id);\n    forkJoin(obs2).subscribe(res => {\n      // console.log(\"res\");\n      // console.log(res);\n      for(let data of res){\n        console.log(\"data\");\n        console.log(data.payload.id);\n        this.router.navigateByUrl(`/chat/${data.payload.id}`);\n      }\n      // for (let data of res) {\n      //   if (data.length > 0) {\n      //     console.log(\"found an existing group with this group id =\"+data[0].id);\n      //     this.groupId = data[0].id;\n      //     this.router.navigateByUrl(`/chat/${this.groupId}`);\n      //   }\n      // }\n    });\n  }\n\n\n\n  // oneOnOneGroupAvailability(findThisGroupTitle) {\n  //   this.db.collection('groups').snapshotChanges()\n  //   .subscribe(result => {\n  //     result.forEach(r => {\n  //       if((r.payload.doc.data()['type'] == \"OneOnOne\") && (r.payload.doc.data()['title'] == findThisGroupTitle)) {\n  //           // this.groupAvailable = true;\n  //           this.groupId = r.payload.doc.id;\n  //           console.log(\"this.groupId =\"+this.groupId);\n  //           this.groupAvailable = true;\n  //           this.router.navigateByUrl(`/chat/${this.groupId}`);\n  //           this.groupAvailable = false;\n  //           // return true;\n  //       }\n  //     });\n  //   });\n  //   this.groupAvailable = false;\n  //   // return false; \n  // }\n\n\n\n    addUser(participant1) {\n      this.participant = participant1;\n      let obs = this.chatService.findUser(this.participant);\n      forkJoin(obs).subscribe(res => {\n        for (let data of res) {\n          if (data.length > 0) {\n            if(this.users.indexOf(data[0]) > -1) {\n            } else {\n              this.users.push(data[0]);\n            }\n          }\n        }\n        this.participant = '';\n      });\n    }\n  \n    readyToCreateOneOnOneGroup() {\n      this.createGroup(this.titleCheck, this.users).then(res => {\n        console.log(\"group created\");\n        // this.router.navigateByUrl('/chats');\n        this.router.navigateByUrl(`/chat/${this.groupId}`);\n      });\n      this.users = [];\n    }\n\n\n    createGroup(title, users) {\n      let current = {\n        email: this.auth.currentUser.email,\n        id: this.auth.currentUserId,\n        nickname: this.auth.nickname\n      };\n      let allUsers = [current];\n      allUsers.push(...users);\n      return this.db.collection('groups').add({\n        title: title,\n        type: 'OneOnOne',\n        users: allUsers\n      }).then(res => {\n        // console.log(\"new group's id =\"+res.id);\n        this.groupId = res.id;\n        let promises = [];\n        for (let usr of allUsers) {\n          let oneAdd = this.db.collection(`users/${usr.id}/groups`).add({\n            id: res.id,\n            type: 'OneOnOne'\n          });\n          promises.push(oneAdd);\n        }\n        return Promise.all(promises);\n      })\n    }\n//   // Add a new document with a generated id.\n// db.collection(\"cities\").add({\n//   name: \"Tokyo\",\n//   country: \"Japan\"\n// })\n// .then(function(docRef) {\n//   console.log(\"Document written with ID: \", docRef.id);\n// })\n// .catch(function(error) {\n//   console.error(\"Error adding document: \", error);\n// });\n\n  openProfile() {\n\n  }\n  \n  signOut() {\n    this.users = null;\n    this.groups = null;\n    this.listOfUsers = null;\n    this.auth.signOut().then(() => {\n      this.router.navigateByUrl('/login');\n    });\n  }\n}\n"],"sourceRoot":"webpack:///"}