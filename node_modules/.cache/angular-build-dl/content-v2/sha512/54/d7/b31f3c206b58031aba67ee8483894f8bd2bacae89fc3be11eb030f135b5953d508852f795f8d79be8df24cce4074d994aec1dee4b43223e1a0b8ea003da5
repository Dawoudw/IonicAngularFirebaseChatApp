{"version":3,"sources":["webpack:///src/app/pages/chats/chats.page.html","webpack:///src/app/pages/chats/chats.module.ts","webpack:///src/app/pages/chats/chats.page.scss","webpack:///src/app/pages/chats/chats.page.ts"],"names":["routes","path","component","ChatsPageModule","imports","forChild","declarations","ChatsPage","auth","db","router","chatService","users","items","items2","title","titleCheck","participant","participant1","currentUserEmail1","currentUserNickname1","chat","currentUser","email","currentUserNickName","console","log","getUnreadMessageBadge","getUnreadMessages","groups","getGroups","getAllGroups","subscribe","result","forEach","r","payload","doc","data","id","push","getAllUsers","count","userId","usr","nickname","email1","nickname2","nickname1","x","localeCompare","undefined","numeric","sensitivity","obs1","findGroup","res","length","groupId","navigateByUrl","setTimeout","addUser","readyToCreateOneOnOneGroup","group","collection","ref","where","valueChanges","idField","pipe","obs2","findGroupById","obs","findUser","indexOf","createGroup","then","current","currentUserId","allUsers","add","type","promises","oneAdd","Promise","all","signOut","selector","template"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACSf,QAAMA,MAAM,GAAW,CACrB;AACEC,UAAI,EAAE,EADR;AAEEC,eAAS,EAAE;AAFb,KADqB,CAAvB;;AAgBA,QAAaC,eAAe;AAAA;AAAA,KAA5B;;AAAaA,mBAAe,6DAT3B,+DAAS;AACRC,aAAO,EAAE,CACP,4DADO,EAEP,0DAFO,EAGP,0DAHO,EAIP,6DAAaC,QAAb,CAAsBL,MAAtB,CAJO,CADD;AAORM,kBAAY,EAAE,CAAC,qDAAD;AAPN,KAAT,CAS2B,GAAfH,eAAe,CAAf;;;;;;;;;;;;;;;;ACzBb;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wDCIf;;;AAUA,QAAaI,SAAS;AA6BpB,yBACUC,IADV,EAEUC,EAFV,EAGUC,MAHV,EAIUC,WAJV,EAIoC;AAAA;;AAH1B,aAAAH,IAAA,GAAAA,IAAA;AACA,aAAAC,EAAA,GAAAA,EAAA;AACA,aAAAC,MAAA,GAAAA,MAAA;AACA,aAAAC,WAAA,GAAAA,WAAA;AA5BV,aAAAC,KAAA,GAAQ,EAAR;AACA,aAAAC,KAAA,GAAQ,EAAR;AACA,aAAAC,MAAA,GAAS,EAAT;AAEA,aAAAC,KAAA,GAAQ,EAAR;AACA,aAAAC,UAAA,GAAa,EAAb;AACA,aAAAC,WAAA,GAAc,EAAd;AACA,aAAAC,YAAA,GAAe,EAAf;AACA,aAAAC,iBAAA,GAAoB,EAApB;AACA,aAAAC,oBAAA,GAAuB,EAAvB;AAEA,aAAAC,IAAA,GAAO,IAAP;AAiBuC;;AAjCnB;AAAA;AAAA,mCAmCT;AAAA;;AACT;AACA,eAAKT,KAAL,GAAa,EAAb,CAFS,CAIT;;AACA,eAAKO,iBAAL,GAAyB,KAAKX,IAAL,CAAUc,WAAV,CAAsBC,KAA/C,CALS,CAOT;;AACA,eAAKH,oBAAL,GAA4B,KAAKZ,IAAL,CAAUgB,mBAAtC;AACAC,iBAAO,CAACC,GAAR,CAAY,4BAAZ;AACAD,iBAAO,CAACC,GAAR,CAAY,KAAKN,oBAAjB,EAVS,CAWT;AAEA;;AACA,eAAKO,qBAAL,GAA6B,KAAKC,iBAAL,EAA7B,CAdS,CAgBT;;AACA,eAAKC,MAAL,GAAc,KAAKlB,WAAL,CAAiBmB,SAAjB,EAAd,CAjBS,CAoBT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,eAAKnB,WAAL,CAAiBoB,YAAjB,GACCC,SADD,CACW,UAAAC,MAAM,EAAI;AACnBA,kBAAM,CAACC,OAAP,CAAe,UAAAC,CAAC,EAAI;AAClB,kBAAGA,CAAC,CAACC,OAAF,CAAUC,GAAV,CAAcC,IAAd,GAAqB,MAArB,KAAgC,OAAnC,EAA4C;AAC1Cb,uBAAO,CAACC,GAAR,CAAY,EAAZ;AACAD,uBAAO,CAACC,GAAR,CAAY,sBAAZ;AACAD,uBAAO,CAACC,GAAR,CAAYS,CAAC,CAACC,OAAF,CAAUC,GAAV,CAAcE,EAA1B;;AACA,qBAAI,CAACzB,MAAL,CAAY0B,IAAZ,CAAiBL,CAAjB;AACD;AACF,aAPD;AAQD,WAVD,EAvCS,CAqDT;;AACA,eAAKxB,WAAL,CAAiB8B,WAAjB,GACKT,SADL,CACe,UAAAC,MAAM,EAAI;AACnBA,kBAAM,CAACC,OAAP,CAAe,UAAAC,CAAC,EAAI;AAClB,kBAAGA,CAAC,CAACC,OAAF,CAAUC,GAAV,CAAcC,IAAd,GAAqB,OAArB,KAAiC,KAAI,CAACnB,iBAAzC,EAA4D;AACxD,qBAAI,CAACN,KAAL,CAAW2B,IAAX,CAAgBL,CAAhB;AACH;AACF,aAJD;AAKL,WAPD;AAUD,SAnGmB,CAqGpB;;AArGoB;AAAA;AAAA,4CAsGA;AAClB,cAAIO,KAAK,GAAG,CAAZ,CADkB,CAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,iBAAOA,KAAP;AACD;AA9HmB;AAAA;AAAA,uCA+HLC,MA/HK,EA+HG;AAAA,qDACL,KAAKtB,IAAL,CAAUT,KADL;AAAA;;AAAA;AACrB,gEAAiC;AAAA,kBAAxBgC,GAAwB;;AAC/B,kBAAIA,GAAG,CAACL,EAAJ,IAAUI,MAAd,EAAsB;AACpB,uBAAOC,GAAG,CAACC,QAAX;AACD;AACF;AALoB;AAAA;AAAA;AAAA;AAAA;;AAMrB,iBAAO,SAAP;AACD,SAtImB,CA0IpB;;AA1IoB;AAAA;AAAA,qCA2IPC,MA3IO,EA2IAC,SA3IA,EA2IW;AAAA;;AAC7B;AACA,cAAIC,SAAS,GAAG,KAAKxC,IAAL,CAAUqC,QAA1B;AACA,cAAII,CAAC,GAAGD,SAAS,CAACE,aAAV,CAAwBH,SAAxB,EAAmCI,SAAnC,EAA8C;AAACC,mBAAO,EAAE,IAAV;AAAgBC,uBAAW,EAAE;AAA7B,WAA9C,CAAR;;AACA,cAAGJ,CAAC,IAAE,CAAC,CAAP,EAAS;AACP;AACA,iBAAKjC,UAAL,GAAkB,SAAOgC,SAAP,GAAkB,GAAlB,GAAuBD,SAAzC;AACAtB,mBAAO,CAACC,GAAR,CAAY,sBAAoB,KAAKV,UAArC;AACD,WAJD,MAIO;AACL;AACA,iBAAKA,UAAL,GAAkB,SAAO+B,SAAP,GAAkB,GAAlB,GAAuBC,SAAzC;AACAvB,mBAAO,CAACC,GAAR,CAAY,sBAAoB,KAAKV,UAArC;AACD;;AAED,cAAIsC,IAAI,GAAG,KAAKC,SAAL,CAAe,KAAKvC,UAApB,CAAX;AACA,gEAASsC,IAAT,EAAetB,SAAf,CAAyB,UAAAwB,GAAG,EAAI;AAAA,wDACbA,GADa;AAAA;;AAAA;AAC9B,qEAAsB;AAAA,oBAAblB,IAAa;;AACpB,oBAAIA,IAAI,CAACmB,MAAL,GAAc,CAAlB,EAAqB;AACnBhC,yBAAO,CAACC,GAAR,CAAY,iDAA+CY,IAAI,CAAC,CAAD,CAAJ,CAAQC,EAAnE;AACA,wBAAI,CAACmB,OAAL,GAAepB,IAAI,CAAC,CAAD,CAAJ,CAAQC,EAAvB;;AACA,wBAAI,CAAC7B,MAAL,CAAYiD,aAAZ,iBAAmC,MAAI,CAACD,OAAxC;AACD,iBAJD,MAKK;AACHjC,yBAAO,CAACC,GAAR,CAAY,0CAAZ,EADG,CACwD;;AAC3DkC,4BAAU,CAAC,YAAM;AACf,0BAAI,CAACC,OAAL,CAAaf,MAAb;;AACArB,2BAAO,CAACC,GAAR,CAAY,MAAI,CAACd,KAAjB,EAFe,CAGf;AACF;AACC,mBALS,EAKP,IALO,CAAV;AAMAgD,4BAAU,CAAC,YAAM;AACf,0BAAI,CAACE,0BAAL,GADe,CAEjB;;AAEC,mBAJS,EAIP,IAJO,CAAV;AAKD;AACF;AArB6B;AAAA;AAAA;AAAA;AAAA;AAsB/B,WAtBD;AAuBD;AAjLmB;AAAA;AAAA,kCAmLV/C,KAnLU,EAmLH;AACf,cAAIgD,KAAK,GAAG,KAAKtD,EAAL,CAAQuD,UAAR,CAAmB,QAAnB,EAA6B,UAAAC,GAAG;AAAA,mBAC1CA,GAAG,CAACC,KAAJ,CAAU,OAAV,EAAmB,IAAnB,EAAyBnD,KAAzB,CAD0C;AAAA,WAAhC,EACuBoD,YADvB,CACoC;AAAEC,mBAAO,EAAE;AAAX,WADpC,EACuDC,IADvD,CAEV,4DAAK,CAAL,CAFU,CAAZ;AAIA,iBAAON,KAAP;AACD;AAzLmB;AAAA;AAAA,kCA2LVxB,EA3LU,EA2LPxB,KA3LO,EA2LA;AAAA;;AAClBU,iBAAO,CAACC,GAAR,CAAY,gBAAca,EAA1B;AACA,cAAI+B,IAAI,GAAG,KAAK3D,WAAL,CAAiB4D,aAAjB,CAA+BhC,EAA/B,CAAX;AACA,gEAAS+B,IAAT,EAAetC,SAAf,CAAyB,UAAAwB,GAAG,EAAI;AAC9B;AACA;AAF8B,wDAGdA,GAHc;AAAA;;AAAA;AAG9B,qEAAoB;AAAA,oBAAZlB,IAAY;AAClBb,uBAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,uBAAO,CAACC,GAAR,CAAYY,IAAI,CAACF,OAAL,CAAaG,EAAzB;;AACA,sBAAI,CAAC7B,MAAL,CAAYiD,aAAZ,iBAAmCrB,IAAI,CAACF,OAAL,CAAaG,EAAhD;AACD,eAP6B,CAQ9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAd8B;AAAA;AAAA;AAAA;AAAA;AAe/B,WAfD;AAgBD,SA9MmB,CAkNpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAnOoB;AAAA;AAAA,gCAuOVrB,YAvOU,EAuOI;AAAA;;AACpB,eAAKD,WAAL,GAAmBC,YAAnB;AACA,cAAIsD,GAAG,GAAG,KAAK7D,WAAL,CAAiB8D,QAAjB,CAA0B,KAAKxD,WAA/B,CAAV;AACA,gEAASuD,GAAT,EAAcxC,SAAd,CAAwB,UAAAwB,GAAG,EAAI;AAAA,wDACZA,GADY;AAAA;;AAAA;AAC7B,qEAAsB;AAAA,oBAAblB,IAAa;;AACpB,oBAAIA,IAAI,CAACmB,MAAL,GAAc,CAAlB,EAAqB;AACnB,sBAAG,MAAI,CAAC7C,KAAL,CAAW8D,OAAX,CAAmBpC,IAAI,CAAC,CAAD,CAAvB,IAA8B,CAAC,CAAlC,EAAqC,CACpC,CADD,MACO;AACL,0BAAI,CAAC1B,KAAL,CAAW4B,IAAX,CAAgBF,IAAI,CAAC,CAAD,CAApB;AACD;AACF;AACF;AAR4B;AAAA;AAAA;AAAA;AAAA;;AAS7B,kBAAI,CAACrB,WAAL,GAAmB,EAAnB;AACD,WAVD;AAWD;AArPiB;AAAA;AAAA,qDAuPW;AAAA;;AAC3B,eAAK0D,WAAL,CAAiB,KAAK3D,UAAtB,EAAkC,KAAKJ,KAAvC,EAA8CgE,IAA9C,CAAmD,UAAApB,GAAG,EAAI;AACxD/B,mBAAO,CAACC,GAAR,CAAY,eAAZ,EADwD,CAExD;;AACA,kBAAI,CAAChB,MAAL,CAAYiD,aAAZ,iBAAmC,MAAI,CAACD,OAAxC;AACD,WAJD;AAKA,eAAK9C,KAAL,GAAa,EAAb;AACD;AA9PiB;AAAA;AAAA,oCAiQNG,KAjQM,EAiQCH,KAjQD,EAiQQ;AAAA;;AACxB,cAAIiE,OAAO,GAAG;AACZtD,iBAAK,EAAE,KAAKf,IAAL,CAAUc,WAAV,CAAsBC,KADjB;AAEZgB,cAAE,EAAE,KAAK/B,IAAL,CAAUsE,aAFF;AAGZjC,oBAAQ,EAAE,KAAKrC,IAAL,CAAUqC;AAHR,WAAd;AAKA,cAAIkC,QAAQ,GAAG,CAACF,OAAD,CAAf;AACAE,kBAAQ,CAACvC,IAAT,OAAAuC,QAAQ,qBAASnE,KAAT,EAAR;AACA,iBAAO,KAAKH,EAAL,CAAQuD,UAAR,CAAmB,QAAnB,EAA6BgB,GAA7B,CAAiC;AACtCjE,iBAAK,EAAEA,KAD+B;AAEtCkE,gBAAI,EAAE,UAFgC;AAGtCrE,iBAAK,EAAEmE;AAH+B,WAAjC,EAIJH,IAJI,CAIC,UAAApB,GAAG,EAAI;AACb;AACA,kBAAI,CAACE,OAAL,GAAeF,GAAG,CAACjB,EAAnB;AACA,gBAAI2C,QAAQ,GAAG,EAAf;;AAHa,wDAIGH,QAJH;AAAA;;AAAA;AAIb,qEAA0B;AAAA,oBAAjBnC,GAAiB;;AACxB,oBAAIuC,MAAM,GAAG,MAAI,CAAC1E,EAAL,CAAQuD,UAAR,iBAA4BpB,GAAG,CAACL,EAAhC,cAA6CyC,GAA7C,CAAiD;AAC5DzC,oBAAE,EAAEiB,GAAG,CAACjB,EADoD;AAE5D0C,sBAAI,EAAE;AAFsD,iBAAjD,CAAb;;AAIAC,wBAAQ,CAAC1C,IAAT,CAAc2C,MAAd;AACD;AAVY;AAAA;AAAA;AAAA;AAAA;;AAWb,mBAAOC,OAAO,CAACC,GAAR,CAAYH,QAAZ,CAAP;AACD,WAhBM,CAAP;AAiBD,SA1RiB,CA2RtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AArSsB;AAAA;AAAA,sCAuSN,CAEb;AAzSmB;AAAA;AAAA,kCA2SV;AAAA;;AACR,eAAKtE,KAAL,GAAa,IAAb;AACA,eAAKiB,MAAL,GAAc,IAAd;AACA,eAAKhB,KAAL,GAAa,IAAb;AACA,eAAKL,IAAL,CAAU8E,OAAV,GAAoBV,IAApB,CAAyB,YAAM;AAC7B,kBAAI,CAAClE,MAAL,CAAYiD,aAAZ,CAA0B,QAA1B;AACD,WAFD;AAGD;AAlTmB;;AAAA;AAAA,OAAtB;;;;cA8BkB;;cACF;;cACI;;cACK;;;;AAjCZpD,aAAS,6DALrB,gEAAU;AACTgF,cAAQ,EAAE,WADD;AAETC,cAAQ,EAAR;AAAA;AAAA,gGAFS;;;;AAAA,KAAV,CAKqB,E,+EA8BJ,kE,EACF,wE,EACI,sD,EACK,kE,EAjCH,GAATjF,SAAS,CAAT","file":"pages-chats-chats-module-es5.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n\\n    </ion-buttons>\\n    <ion-title>Welcome {{ currentUserNickname1 }}</ion-title>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-button routerLink=\\\"/profile\\\">\\n        <ion-icon name=\\\"people\\\" slot=\\\"icon-only\\\"></ion-icon>\\n      </ion-button>\\n      <ion-button (click)=\\\"signOut()\\\">\\n        <ion-icon name=\\\"log-out\\\" slot=\\\"icon-only\\\"></ion-icon>\\n      </ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n\\n  <ion-list>\\n    <ion-item-divider>\\n      <ion-label>\\n        Signed in as: {{ currentUserEmail1 }}\\n      </ion-label>\\n    </ion-item-divider>\\n\\n    <!-- Showing Groups created using \\\"Create A Group Button\\\" -->\\n    <ion-item-divider *ngIf=\\\"items2.length!=0\\\">\\n      <ion-label>\\n       Your Groups\\n      </ion-label>\\n    </ion-item-divider>\\n    <ion-item button *ngFor=\\\"let item of items2;\\\"\\n    (click)=\\\"GroupChat(item.payload.doc.data().id,item.payload.doc.data().title)\\\"\\n    >\\n      <ion-label class=\\\"ion-text-wrap\\\">\\n        <ion-text color=\\\"primary\\\">\\n          <h3>{{ item.payload.doc.data().title }}</h3>\\n        </ion-text>\\n        <p>{{ item.payload.doc.data().users}} Users</p>\\n        <!-- <p>Group id: {{ item.payload.doc.data().id }}</p> -->\\n      </ion-label>\\n    </ion-item>\\n\\n\\n\\n    <ion-item-divider>\\n      <ion-label>\\n        Contacts (All Available Users)\\n      </ion-label>\\n    </ion-item-divider>\\n    <ion-item button *ngFor=\\\"let item of items;\\\" (click)=\\\"oneOnOneChat(item.payload.doc.data().email,item.payload.doc.data().nickname)\\\">\\n      <ion-label>\\n        {{ item.payload.doc.data().email }}\\n        <p>{{ item.payload.doc.data().nickname }}</p>\\n      </ion-label>\\n      <!-- Keep either a button or a routerlink--both togather will not work -->\\n      <!-- <ion-button icon-only (click)=\\\"oneOnOneChat(item.payload.doc.data().email,item.payload.doc.data().nickname)\\\">\\n        <ion-icon name=\\\"chatbubble-outline\\\"></ion-icon>\\n      </ion-button> -->\\n      <!-- <ion-button icon-only>\\n        <ion-icon name=\\\"call-outline\\\"></ion-icon>\\n      </ion-button> -->\\n    </ion-item>\\n\\n\\n\\n    <!-- Showing All groups (including one on one chat groups) -->\\n    <!-- <ion-item-divider *ngIf=\\\"(groups | async)?.length!=0\\\">\\n      <ion-label>\\n      All Groups (1-1 groups & group chat groups)\\n    </ion-label>\\n  </ion-item-divider>\\n  <ion-item button *ngFor=\\\"let group of groups | async\\\" class=\\\"ion-text-wrap\\\"\\n  [routerLink]=\\\"['/', 'chat', (group | async)?.id || 0]\\\">\\n    <ion-label class=\\\"ion-text-wrap\\\">\\n      <ion-text color=\\\"primary\\\">\\n        <h3>{{ (group | async)?.title }}</h3>\\n      </ion-text>\\n      <p>{{ (group | async)?.users.length }} Users</p>\\n    </ion-label>\\n    <ion-badge color=\\\"success\\\" slot=\\\"end\\\"> {{ getUnreadMessageBadge }}</ion-badge>\\n  </ion-item> -->\\n\\n\\n\\n\\n\\n\\n  </ion-list>\\n</ion-content>\\n\\n<ion-footer>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-button color=\\\"light\\\" fill=\\\"clear\\\" expand=\\\"full\\\" routerLink=\\\"/chats/start\\\">Create a new Group</ion-button>\\n  </ion-toolbar>\\n</ion-footer>\\n\\n\";","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ChatsPage } from './chats.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ChatsPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [ChatsPage]\n})\nexport class ChatsPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2NoYXRzL2NoYXRzLnBhZ2Uuc2NzcyJ9 */\";","import { ChatService } from './../../services/chat.service';\nimport { AuthService } from './../../services/auth.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n// import { map } from 'rxjs/operators';\nimport { forkJoin, Observable } from 'rxjs';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { take, map } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-chats',\n  templateUrl: './chats.page.html',\n  styleUrls: ['./chats.page.scss'],\n})\nexport class ChatsPage implements OnInit {\n\n  groups: Observable<any>;\n  groups2: Observable<any>;\n  newGroups: Observable<any>;\n  users = [];\n  items = [];\n  items2 = [];\n  allusers: Array<any>;\n  title = '';\n  titleCheck = '';\n  participant = '';\n  participant1 = '';\n  currentUserEmail1 = '';\n  currentUserNickname1 = '';\n  getUnreadMessageBadge: any;\n  chat = null;\n  messages: Observable<any[]>;\n  oneOnOneEmail: '';\n  oneOnOneid: any;\n  oneOnOnenickname: '';\n  groupAvailable: boolean;\n  groupId: any;\n\n\n\n\n  \n\n  constructor(\n    private auth: AuthService, \n    private db: AngularFirestore,\n    private router: Router, \n    private chatService: ChatService) { }\n\n  ngOnInit() {\n    // this.items = [];\n    this.users = [];\n\n    //getting current user email\n    this.currentUserEmail1 = this.auth.currentUser.email;\n\n    //getting current user nickname\n    this.currentUserNickname1 = this.auth.currentUserNickName;\n    console.log(\"This is the nickname I got\");\n    console.log(this.currentUserNickname1);\n    // console.log(this.auth.currentUser);\n\n    //getting unread messages badge -- if last 10+ unread messages then it will show 10+\n    this.getUnreadMessageBadge = this.getUnreadMessages();\n\n    //getting list of all available groups\n    this.groups = this.chatService.getGroups();\n\n\n    //this gets a list of groups created for only group chat\n    // this.chatService.getGroupsForGroupChat1().subscribe(result => {\n    //   result.forEach(r => {\n    //     console.log(\"r =\");\n    //     console.log(r.payload.doc.data());\n    //     if(r.payload.doc.data()['type'] == 'group') {\n    //       console.log(\"group ids with group chat\");\n    //       console.log(r.payload.doc.data()['id']);\n    //       const data = this.chatService.getOneGroup(r.payload.doc.data()['id'],r.payload.doc.data()['id']);\n    //       console.log(data);\n    //       // this.newGroups = data;\n    //       this.items2.push(data);\n    //     }\n    //   });   \n    // });\n    // console.log(\"this.newGroups =\");\n    // console.log(this.newGroups);\n\n    //get all groups\n    this.chatService.getAllGroups()\n    .subscribe(result => {\n      result.forEach(r => {\n        if(r.payload.doc.data()['type'] == 'group') {\n          console.log(\"\")\n          console.log(\"id of these groups =\");\n          console.log(r.payload.doc.id);\n          this.items2.push(r);\n        }\n      });   \n    });  \n\n\n\n    //this gets a list of all users\n    this.chatService.getAllUsers()\n        .subscribe(result => {\n          result.forEach(r => {\n            if(r.payload.doc.data()['email'] != this.currentUserEmail1) {\n                this.items.push(r);\n            }\n          });   \n    });\n\n\n  }\n\n  //function to get unread messages\n  getUnreadMessages() {\n    let count = 0;\n    // while (count<10) {\n    //   this.chatService.getChatMessages(this.chat.id).pipe(\n    //     map(messages => {\n    //       for (let msg of messages) {\n    //         console.log(\"msg\");\n    //         console.log(msg['readFlag']);\n    //         // msg['readFlag'] = true;\n    //         console.log(msg['readFlag']);\n    //         if(msg['readFlag'] == false) {\n    //           count++;\n    //         } else {\n    //           return count;\n    //         }\n    //         // msg['user'] = this.getMsgFromName(msg['from']);\n    //       }\n    //       // console.log('messages: ', messages);\n    //       // return messages;\n    //     })\n    //   );\n    // }\n    // count++;\n    return count;\n  }\n  getMsgFromName(userId) {\n    for (let usr of this.chat.users) {\n      if (usr.id == userId) {\n        return usr.nickname;\n      }\n    }\n    return 'Deleted';\n  }\n    \n\n\n  //---------one on one chat\n  oneOnOneChat(email1,nickname2) {\n    //creating group name--------------------------------- stored in this.titleCheck (ordered alphabatically from both users' nickname)\n    let nickname1 = this.auth.nickname;\n    let x = nickname1.localeCompare(nickname2, undefined, {numeric: true, sensitivity: 'base'});\n    if(x==-1){\n      // console.log(\"nickname1 will come first\");\n      this.titleCheck = 'oOc_'+nickname1 +'&'+ nickname2;\n      console.log(\"this.titlecheck =\"+this.titleCheck);\n    } else {\n      // console.log(\"nickname2 will come first\");\n      this.titleCheck = 'oOc_'+nickname2 +'&'+ nickname1;\n      console.log(\"this.titlecheck =\"+this.titleCheck);\n    }\n\n    let obs1 = this.findGroup(this.titleCheck);\n    forkJoin(obs1).subscribe(res => {\n      for (let data of res) {\n        if (data.length > 0) {\n          console.log(\"found an existing group with this group id =\"+data[0].id);\n          this.groupId = data[0].id;\n          this.router.navigateByUrl(`/chat/${this.groupId}`);\n        }\n        else {\n          console.log(\"group not found--in create group section\");   //group not available--create group\n          setTimeout(() => {\n            this.addUser(email1);\n            console.log(this.users);\n            // this.readyToCreateOneOnOneGroup();\n          // this.groupId  is assigned with new group id in createGroup\n          }, 1000);\n          setTimeout(() => {\n            this.readyToCreateOneOnOneGroup();\n          // this.groupId  is assigned with new group id in createGroup()\n          \n          }, 2000);\n        }\n      }\n    });\n  }\n\n  findGroup(title) {\n    let group = this.db.collection('groups', ref => \n      ref.where('title', '==', title)).valueChanges({ idField: 'id' }).pipe(\n      take(1)\n    );\n    return group;\n  }\n\n  GroupChat(id,title) {\n    console.log(\"id passed =\"+id);\n    let obs2 = this.chatService.findGroupById(id);\n    forkJoin(obs2).subscribe(res => {\n      // console.log(\"res\");\n      // console.log(res);\n      for(let data of res){\n        console.log(\"data\");\n        console.log(data.payload.id);\n        this.router.navigateByUrl(`/chat/${data.payload.id}`);\n      }\n      // for (let data of res) {\n      //   if (data.length > 0) {\n      //     console.log(\"found an existing group with this group id =\"+data[0].id);\n      //     this.groupId = data[0].id;\n      //     this.router.navigateByUrl(`/chat/${this.groupId}`);\n      //   }\n      // }\n    });\n  }\n\n\n\n  // oneOnOneGroupAvailability(findThisGroupTitle) {\n  //   this.db.collection('groups').snapshotChanges()\n  //   .subscribe(result => {\n  //     result.forEach(r => {\n  //       if((r.payload.doc.data()['type'] == \"OneOnOne\") && (r.payload.doc.data()['title'] == findThisGroupTitle)) {\n  //           // this.groupAvailable = true;\n  //           this.groupId = r.payload.doc.id;\n  //           console.log(\"this.groupId =\"+this.groupId);\n  //           this.groupAvailable = true;\n  //           this.router.navigateByUrl(`/chat/${this.groupId}`);\n  //           this.groupAvailable = false;\n  //           // return true;\n  //       }\n  //     });\n  //   });\n  //   this.groupAvailable = false;\n  //   // return false; \n  // }\n\n\n\n    addUser(participant1) {\n      this.participant = participant1;\n      let obs = this.chatService.findUser(this.participant);\n      forkJoin(obs).subscribe(res => {\n        for (let data of res) {\n          if (data.length > 0) {\n            if(this.users.indexOf(data[0]) > -1) {\n            } else {\n              this.users.push(data[0]);\n            }\n          }\n        }\n        this.participant = '';\n      });\n    }\n  \n    readyToCreateOneOnOneGroup() {\n      this.createGroup(this.titleCheck, this.users).then(res => {\n        console.log(\"group created\");\n        // this.router.navigateByUrl('/chats');\n        this.router.navigateByUrl(`/chat/${this.groupId}`);\n      });\n      this.users = [];\n    }\n\n\n    createGroup(title, users) {\n      let current = {\n        email: this.auth.currentUser.email,\n        id: this.auth.currentUserId,\n        nickname: this.auth.nickname\n      };\n      let allUsers = [current];\n      allUsers.push(...users);\n      return this.db.collection('groups').add({\n        title: title,\n        type: 'OneOnOne',\n        users: allUsers\n      }).then(res => {\n        // console.log(\"new group's id =\"+res.id);\n        this.groupId = res.id;\n        let promises = [];\n        for (let usr of allUsers) {\n          let oneAdd = this.db.collection(`users/${usr.id}/groups`).add({\n            id: res.id,\n            type: 'OneOnOne'\n          });\n          promises.push(oneAdd);\n        }\n        return Promise.all(promises);\n      })\n    }\n//   // Add a new document with a generated id.\n// db.collection(\"cities\").add({\n//   name: \"Tokyo\",\n//   country: \"Japan\"\n// })\n// .then(function(docRef) {\n//   console.log(\"Document written with ID: \", docRef.id);\n// })\n// .catch(function(error) {\n//   console.error(\"Error adding document: \", error);\n// });\n\n  openProfile() {\n\n  }\n  \n  signOut() {\n    this.users = null;\n    this.groups = null;\n    this.items = null;\n    this.auth.signOut().then(() => {\n      this.router.navigateByUrl('/login');\n    });\n  }\n}\n"]}