{"version":3,"sources":["./src/app/pages/chats/chats.page.html","./src/app/pages/chats/chats.module.ts","./src/app/pages/chats/chats.page.scss","./src/app/pages/chats/chats.page.ts"],"names":[],"mappings":"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","file":"pages-chats-chats-module-es2015.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n\\n    </ion-buttons>\\n    <ion-title>Chats</ion-title>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-button routerLink=\\\"/profile\\\">\\n        <ion-icon name=\\\"people\\\" slot=\\\"icon-only\\\"></ion-icon>\\n      </ion-button>\\n      <ion-button (click)=\\\"signOut()\\\">\\n        <ion-icon name=\\\"log-out\\\" slot=\\\"icon-only\\\"></ion-icon>\\n      </ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n\\n  <ion-list>\\n    <ion-item-divider>\\n      <ion-label>\\n        Your Groups\\n      </ion-label>\\n    </ion-item-divider>\\n    <ion-item button *ngFor=\\\"let group of groups | async\\\" class=\\\"ion-text-wrap\\\"\\n    [routerLink]=\\\"['/', 'chat', (group | async)?.id || 0]\\\">\\n      <ion-label class=\\\"ion-text-wrap\\\">\\n        <ion-text color=\\\"primary\\\">\\n          <h3>{{ (group | async)?.title }}</h3>\\n        </ion-text>\\n        <p>{{ (group | async)?.users.length }} Users</p>\\n      </ion-label>\\n    </ion-item>\\n\\n    <ion-item-divider>\\n      <ion-label>\\n        Contacts (All Available Users)\\n      </ion-label>\\n    </ion-item-divider>\\n    <ion-item *ngFor=\\\"let item of items\\\">\\n      <!-- {{item.payload.doc.data().nickname}} -->\\n      <ion-label>\\n        {{ item.payload.doc.data().email }}\\n        <p>{{ item.payload.doc.data().nickname }}</p>\\n      </ion-label>\\n      <!-- {{item.payload.doc.data().email}} -->\\n      <ion-button icon-only (click)=\\\"addUser(item.payload.doc.data().email,item.payload.doc.data().nickname)\\\">\\n        <ion-icon name=\\\"chatbubble-outline\\\"></ion-icon>\\n      </ion-button>\\n\\n      <!-- <ion-button color=\\\"light\\\" expand=\\\"full\\\" fill=\\\"clear\\\" [disabled]=\\\"title == '' || users.length == 0\\\" \\n    (click)=\\\"createGroup()\\\">Start\\n      Group</ion-button> -->\\n\\n</ion-item>\\n\\n\\n\\n\\n  </ion-list>\\n\\n  \\n</ion-content>\\n\\n<ion-footer>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-button color=\\\"light\\\" fill=\\\"clear\\\" expand=\\\"full\\\" routerLink=\\\"/chats/start\\\">Create a new Group</ion-button>\\n  </ion-toolbar>\\n</ion-footer>\\n\\n\";","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ChatsPage } from './chats.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ChatsPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [ChatsPage]\n})\nexport class ChatsPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2NoYXRzL2NoYXRzLnBhZ2Uuc2NzcyJ9 */\";","import { ChatService } from './../../services/chat.service';\nimport { AuthService } from './../../services/auth.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable, forkJoin } from 'rxjs';\n\n@Component({\n  selector: 'app-chats',\n  templateUrl: './chats.page.html',\n  styleUrls: ['./chats.page.scss'],\n})\nexport class ChatsPage implements OnInit {\n\n  groups: Observable<any>;\n  users = [];\n  allusers: Array<any>;\n  items: Array<any>;\n  title = '';\n  participant = '';\n  participant1 = '';\n\n  constructor(\n    private auth: AuthService, \n    private router: Router, \n    private chatService: ChatService) { }\n\n  ngOnInit() {\n    //getting list of all available groups\n    this.groups = this.chatService.getGroups();\n    console.log(\"this.groups\");\n    console.log(this.groups);\n    //this gets a list of all users\n    this.chatService.getAllUsers()\n        .subscribe(result => {\n          this.items = result;\n    });\n  }\n\n  //this is for creating a new group when chatting with only one person\n  addUser(participant1) {\n    // console.log(\"when calling addUser function, users array =\");\n    // console.log(this.users);\n    this.participant = participant1;\n    let obs = this.chatService.findUser(this.participant);\n    forkJoin(obs).subscribe(res => {\n      for (let data of res) {\n        if (data.length > 0) {\n          if(this.users.indexOf(data[0]) > -1) {\n          } else {\n            this.users.push(data[0]);\n          }\n        }\n      }\n      this.participant = '';\n    });\n    this.createGroup();\n  }\n\n  createGroup() {\n    // console.log(\"this.title\");\n    // console.log(this.title);\n    // console.log(\"this.users\");\n    // console.log(this.users);\n    // console.log(\"users array length: \");\n    // console.log(this.users.length);\n    this.chatService.createGroup(this.title, this.users).then(res => {\n      this.router.navigateByUrl('/chats');\n    });\n  }\n\n  openProfile() {\n\n  }\n  \n  signOut() {\n    this.auth.signOut().then(() => {\n      this.router.navigateByUrl('/login');\n    });\n  }\n}\n"],"sourceRoot":"webpack:///"}